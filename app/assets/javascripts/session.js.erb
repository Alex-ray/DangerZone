// App Objects
var app         = {};
app.map         = {};
app.map.geo     = {};
app.observer    = {};
app.view        = {};
app.crimes      = {};

// Data
app.crimes.data = [];
//Initialize Application
app.initialize = function() {
  app.map.initialize();
  app.observer.initialize();
}

// Map Configurations
app.map.container       = 'map';
app.map.googleLocation  = new google.maps.LatLng(37.765,-122.437);
app.map.currentLocation = {lng: -122.437, lat: 37.765};

app.map.options = {
  zoom:             18,
  center:           app.map.googleLocation,
  disableDefaultUI: true,
  zoomControl:      true,
  mapTypeControlOptions: {
    mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'styled_map']
  }
};

app.map.styles = [
{
  "featureType": "road.arterial",
  "elementType": "geometry.fill",
  "stylers": [
  {"hue":    "#aaff00"},
  {"color":  "#ffffff"},
  {"weight": 3}
  ]
},{
  "featureType": "road.arterial",
  "elementType": "geometry.stroke",
  "stylers": [
  {"color":  "#d2d2d0"},
  {"weight": 2}
  ]
},{
  "featureType": "road.arterial",
  "elementType": "labels.text.fill",
  "stylers": [
  {"color": "#ffffff"}
  ]
},{
  "featureType": "road.arterial",
  "elementType": "labels.text.stroke",
  "stylers": [
  {"color":  "#bcbbba"},
  {"weight": 1.9}
  ]
}
];

// Create Google Map
app.map.createMap = function(){
  var that        = this;
  that.styledMap  = new google.maps.StyledMapType(that.styles, {name: "Styled Map"});
  that.Map        = new google.maps.Map(document.getElementById(that.container), that.options);

  that.Map.mapTypes.set('styled_map', that.styledMap);
  that.Map.setMapTypeId('styled_map');

  that.setMarker();
}

// Get Safety Score
app.crimes.getSafetyScore = function(date) {
  var sum_distance_threat = 0;
  var sum_time_threat =0;
  var sum = 0;
  var weights = {"1":50, "2":100};
  var minutes = (date.getHours()*60) + date.getMinutes();
  var crimes = app.crimes.data[0];
  for (x in crimes) {
    var crime = crimes[x];
    var distance = app.map.geo.CalcDistanceBetween(app.map.currentLocation.lat,app.map.currentlocation.lng,parseFloat(crime.latitude),parseFloat(crime.longitude));
    if(distance >=0 && distance <= 0.2){
      var distance_threat_score = (-500*distance) + 100;
      sum_distance_threat += distance_threat_score
  }
    
    var timeDiff = minutes - crime.time;
    if (timeDiff < 0 && timeDiff >= -60){
      var time_threat_score = (1.66666666666*timeDiff) + 100;
      sum_time_threat += time_threat_score;

   }  else if (timeDiff >= 0  && timeDiff <= 60) {
     var time_threat_score = (-1.66666666666*timeDiff) + 100;
     sum_time_threat += time_threat_score;
   } 
  
   if(weights[String(crime.threat_level)]){
   sum += weights[String(crime.threat_level)];
 }
  }
   return (sum_distance_threat+sum+sum_time_threat)/(crimes.length*3)
}

app.map.geo.CalcDistanceBetween = function(lat1,lon1,lat2,lon2){
  var p1 = new google.maps.LatLng(lat1,lon1);
  var p2 = new google.maps.LatLng(lat2,lon2);
  console.log(this.calcDistance(p1,p2))
  return this.calcDistance(p1,p2);
}

app.map.geo.calcDistance = function(p1,p2){
  return ((google.maps.geometry.spherical.computeDistanceBetween(p1, p2)).toFixed(2))/1000 *  0.621371;  
}

// Create a heat map layer
app.map.createHeatMap = function(data){
  var that        = this;
  var crimes      = [].concat.apply([], app.crimes.data);
  var heatMapData = [];

  for (x in crimes) {
    if (crimes[x].threat_level == 2){
      heatMapData.push({location: new google.maps.LatLng(crimes[x].latitude, crimes[x].longitude), weight: 3});
    } else if (crimes[x].threat_level == 1){
      heatMapData.push({location: new google.maps.LatLng(crimes[x].latitude, crimes[x].longitude), weight: 1});
    }
  }

  if (that.heatMap) {that.heatMap.setMap(null)}
  that.heatMap = new google.maps.visualization.HeatmapLayer({data: heatMapData});
  that.heatMap.setMap(app.map.Map);

  var gradient = [
   'rgba(255, 235, 10, 0)',
    'rgba(255, 96, 10, 1)',
    'rgba(255, 55, 10, 1)',
    'rgba(255, 39, 10, 1)'
  ];

  that.heatMap.setOptions({gradient: gradient, radius: 15, opacity: 0.9, maxIntensity: 80});
}
app.map.addLegend = function() {
  this.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(
  document.getElementById('legend'));
}
// Get crime data

app.crimes.layers = [{ min: 0   ,max: 0.5 },
                     { min: 0.5 ,max: 1   },
                     { min: 1   ,max: 1.5 },
                     { min: 1.5 ,max: 2   },
                     { min: 2   ,max: 2.5 },
                     { min: 2.5 ,max: 3   },
                     { min: 3   ,max: 3.5 },
                     { min: 3.5 ,max: 4   },
                     { min: 4   ,max: 4.5 },
                     { min: 4.5 ,max: 5   },
                     { min: 5   ,max: 5.5 },
                     { min: 5.5 ,max: 6   },
                     { min: 6   ,max: 6.5 },
                     { min: 6.5 ,max: 7   }];

app.crimes.getData = function(minDistance, maxDistance, counter) {
  var that   = this;
  var lat    = app.map.currentLocation.lat;
  var lng    = app.map.currentLocation.lng;
  var layers  = that.layers;
  $.getJSON('/crimes?max_distance='+maxDistance+'&min_distance='+minDistance+'&location='+lat+', '+lng, function(data) {
    app.map.createHeatMap(data);
    var safetyScore = app.crimes.getSafetyScore(date);
    alert(safetyScore);
    if (counter <= that.layers.length) {
     that.getData(layers[counter].min, layers[counter].max, (counter+1));      that.data.push(data);
     app.map.createHeatMap();
    }
  });
}

// Set a location marker on new map
app.map.setMarker = function() {
  var that        = this;
  that.geoMarker  = new google.maps.Marker({
    position: that.googleLocation,
    map:      that.Map,
    title:    'Your geolocation',
    icon:     'http://i.imgur.com/FOqzufV.png'
  });

}

app.map.setLocation = function(lat, lng) {
  var that = this;
  that.googleLocation      = new google.maps.LatLng(lat,lng);
  that.currentLocation.lat = lat;
  that.currentLocation.lng = lng;
}

app.map.updateLocation = function() {
  var that = this;
  that.Map.setCenter(that.googleLocation);
  that.geoMarker.setPosition(that.googleLocation);
}

app.map.initialize = function() {
   var that = this;
   that.createMap();
   that.geo.getLocation();
 }

// Geolocation
app.map.geo.getLocation = function() {
  var that = this;
  var date = new Date();
  navigator.geolocation.requestCurrentPosition(that.showPosition, that.errorCallback, that.timeoutCallback, 5000);
}

app.map.geo.timeoutCallback = function(){
}

app.map.geo.showPosition = function(pos) {
  var that = this;
  var lat = pos.coords.latitude;
  var lng = pos.coords.longitude;

  app.map.setLocation(lat, lng);
  app.map.updateLocation();
  app.crimes.getData(0, 0.25, 0);
}

app.map.geo.errorCallback = function(error){

  if(error.PERMISSION_DENIED){
    app.view.flash("Enable your Geo Location!", "alert");
  } else if(error.POSITION_UNAVAILABLE){
    app.view.flash("Enter a location!", "alert");
  } else if(error.TIMEOUT){
    app.view.flash("hmmm we timed out trying to find where you are hiding!", "alert");
  }
}

app.observer.dropDown = function(target, cssClass){
   $(target).click(function(event){
      $(target).toggleClass(cssClass);
     $(this).toggleClass(cssClass);
   });
 }


// Get geolocation from client
navigator.geolocation.requestCurrentPosition = function(successCB, errorCB, timeoutCB, timeoutThreshold){
  var successHandler = successCB;
  var errorHandler   = errorCB;
  var timeout        = timeoutThreshold || 40000;

  window.geolocationTimeoutHandler = function(){timeoutCB();}
  window['geolocationRequestTimeoutHandler'] = setTimeout('geolocationTimeoutHandler()', timeout);

  if (typeof(geolocationRequestTimeoutHandler) != 'undefined'){
    clearTimeout(window['geolocationRequestTimeoutHandler']);
  }

  navigator.geolocation.watchPosition(
    function(position){
      clearTimeout(window['geolocationRequestTimeoutHandler']);
      successHandler(position);
    },
    function(error){
      clearTimeout(window['geolocationRequestTimeoutHandler']);
      errorHandler(error);
    },{enableHighAccuracy: true});
};

// DOM Observers
app.observer.dropDown = function(target, cssClass){
  $(target).click(function(event){
    $(target).toggleClass(cssClass);
  });
}

app.observer.searchFormToggle = function(target, cssClass) {
  $(target).click(function(){
    $(target).parent().toggleClass(cssClass);
  });
}
app.observer.searchLocationForm = function(target){
  $(target).on('submit', function(event){
    event.preventDefault();
    var data = $(this).serialize();

    $.getJSON('/geocoder?'+data, function(data){
      var pos = data.pos.split(" ");
      var lat = pos[1];
      var lng = pos[0];

      app.map.setLocation(lat, lng)
      app.map.updateLocation();
      app.view.formClose();

    }, function(error){
      app.view.alertFlash(error.message);
    });

  });
}

// Initialize DOM listeners
app.observer.initialize = function() {
  var that = this;
  that.dropDown('div.layers', 'open');
  that.searchFormToggle('div.search img', 'open');
  that.searchLocationForm('form.location-search');
}

app.view.flash = function(message, type){
  $('.flash').addClass(type).text(message);

  window.setTimeout(function(){
    $('.flash').removeClass(type);
  }, 4000);
}

app.view.formOpen = function(){
  $('div.search').addClass('open');
}

app.view.formClose = function(){
  $('div.search').removeClass('open');
}

// Start Application
$(document).ready(function(){
  app.initialize();
});
